package com.example.testapp2.Activity;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.app.AppCompatDelegate;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;

import com.example.testapp2.Activity.Account.AccountActivity;
import com.example.testapp2.Activity.Account.SearchHistoryActivity;
import com.example.testapp2.R; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –¥–æ R –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
import com.example.testapp2.utils.ThemeHelper;
import com.google.android.material.bottomnavigation.BottomNavigationView;

import java.io.File;

public class Settings extends AppCompatActivity {

    private Switch themeSwitch;
    private SharedPreferences sharedPreferences;
    private Button cleanCacheButton;
    private ImageButton imageButtonDark, imageButtonLight;
    private TextView textViewDarkThemeLabel, textViewLightThemeLabel;
    private View lineDark, lineLight;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ThemeHelper.applyTheme(this); // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –î–û super.onCreate
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_settings);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ç—É–ª–±–∞—Ä
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(false);
            getSupportActionBar().setHomeButtonEnabled(false);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
        themeSwitch = findViewById(R.id.themeSwitch);
        cleanCacheButton = findViewById(R.id.CleanCashButton);
        sharedPreferences = getSharedPreferences("theme_pref", Context.MODE_PRIVATE);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        imageButtonDark = findViewById(R.id.imageDark);
        imageButtonLight = findViewById(R.id.imageLight);
        textViewDarkThemeLabel = findViewById(R.id.DarkLabel);
        textViewLightThemeLabel = findViewById(R.id.LightLabel);
        lineDark = findViewById(R.id.line_dark);
        lineLight = findViewById(R.id.line_light);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã
        boolean isDarkMode = sharedPreferences.getBoolean("is_dark_mode", false);
        themeSwitch.setChecked(isDarkMode);
        setThemeMode(isDarkMode);  /** –Ω—É–∂–æ–Ω? */
        updateThemeUI(isDarkMode); /** –Ω—É–∂–æ–Ω? */ // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ä–∞–∑—É
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–∏–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        updateThemeLines(isDarkMode);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
        cleanCacheButton.setOnClickListener(v -> {
            clearApplicationCache();
            Toast.makeText(this, "–ö–µ—à –æ—á–∏—â–µ–Ω", Toast.LENGTH_SHORT).show();
            restartApplication();
        });

        /*// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ ImageButton
        imageButtonDark.setOnClickListener(v -> {
            setThemeMode(true);
            updateThemeLabels(true);
            restartActivity();
        });

        imageButtonLight.setOnClickListener(v -> {
            setThemeMode(false);
            updateThemeLabels(false);
            restartActivity();
        });*/

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        imageButtonDark.setOnClickListener(v -> setDarkTheme(true));
        imageButtonLight.setOnClickListener(v -> setDarkTheme(false));


//        themeSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
//            setThemeMode(isChecked);
//            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã –≤ SharedPreferences
//            SharedPreferences.Editor editor = sharedPreferences.edit();
//            editor.putBoolean("is_dark_mode", isChecked);
//            editor.apply();
//            recreate(); // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
//        });
        /*themeSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã
            ThemeHelper.saveThemeChoice(this, isChecked);
            ThemeHelper.applyTheme(this); // –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Å—Ä–∞–∑—É

            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ç–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (–º—è–≥–∫–æ, –±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è)
            Intent intent = getIntent();
            finish();
            overridePendingTransition(0, 0); // —É–±—Ä–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            startActivity(intent);
            overridePendingTransition(0, 0); // —É–±—Ä–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ
        });*/

        // –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤ –Ω–∏–∂–Ω–µ–º —Ç—É–ª–±–∞—Ä–µ
        BottomNavigationView bottomNavigationView = findViewById(R.id.bottom_navigation);
        // Set Home selected
        bottomNavigationView.setSelectedItemId(R.id.nav_settings);
        bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {

                int id = item.getItemId();

                if (id == R.id.nav_learn) {
                    startActivity(new Intent(getApplicationContext(), Learn.class));
                    overridePendingTransition(0, 0);
                    return true;
                } else if (id == R.id.nav_search) {
                    startActivity(new Intent(getApplicationContext(), Search.class));
                    overridePendingTransition(0, 0);
                    return true;
                } else if (id == R.id.nav_settings) {
                    return true;
                } else if (id == R.id.nav_history) {
                    startActivity(new Intent(getApplicationContext(), SearchHistoryActivity.class));
                    overridePendingTransition(0, 0);
                    return true;
                } else if (id == R.id.nav_home) {
                    startActivity(new Intent(getApplicationContext(), MainActivity.class));
                    overridePendingTransition(0, 0);
                    return true;
                }
                return false;
            }
        });
    }

    // –æ–±–≤–æ–¥–∫–∞
    private void updateThemeLines(boolean isDarkMode) {
        if (isDarkMode) {
            lineDark.setVisibility(View.VISIBLE);
            lineLight.setVisibility(View.GONE);
        } else {
            lineDark.setVisibility(View.GONE);
            lineLight.setVisibility(View.VISIBLE);
        }
    }

    private void setDarkTheme(boolean isDarkMode) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putBoolean("is_dark_mode", isDarkMode);
        editor.apply();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        ThemeHelper.applyTheme(this);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateThemeUI(isDarkMode);

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        restartActivity();
    }

    private void updateThemeUI(boolean isDarkMode) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        int activeColor = ContextCompat.getColor(this, R.color.center_color_app);
        int inactiveColor = ContextCompat.getColor(this, R.color.light_gray);

        textViewDarkThemeLabel.setTextColor(isDarkMode ? activeColor : inactiveColor);
        textViewLightThemeLabel.setTextColor(isDarkMode ? inactiveColor : activeColor);
    }

    // –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –∏–∫–æ–Ω–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.up_toolbar_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == R.id.nav_accoutn) {
            startActivity(new Intent(getApplicationContext(), AccountActivity.class));
            overridePendingTransition(0, 0);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Ç–µ–º—ã
    private void setThemeMode(boolean isDarkMode) {
        if (isDarkMode) {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
        } else {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
        }
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    private void restartActivity() {
        Intent intent = getIntent();
        finish();
        startActivity(intent);
        overridePendingTransition(0, 0);
    }

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
private void clearApplicationCache() {
    try {
        File cacheDir = getCacheDir();
        File applicationDir = new File(cacheDir.getParent());
        if (applicationDir.exists()) {
            String[] children = applicationDir.list();
            for (String child : children) {
                if (!child.equals("lib")) {
                    deleteDir(new File(applicationDir, child));
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    private static boolean deleteDir(File dir) {
        if (dir != null && dir.isDirectory()) {
            String[] children = dir.list();
            for (String child : children) {
                boolean success = deleteDir(new File(dir, child));
                if (!success) {
                    return false;
                }
            }
        }
        return dir != null && dir.delete();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private void restartApplication() {
        Intent intent = new Intent(this, MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
        finish();
        Runtime.getRuntime().exit(0); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    }

    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        Log.d("LAYOUT", "DarkLabel position: " + textViewDarkThemeLabel.getTop());
    }

    protected int getSelectedMenuItemId() {
        return R.id.nav_settings;
    }
}